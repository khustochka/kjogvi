import Config

# Configure your database
config :kjogvi, Kjogvi.Repo,
  hostname: System.get_env("DATABASE_HOST", "localhost"),
  port: System.get_env("DATABASE_PORT"),
  password: System.get_env("DATABASE_PASSWORD"),
  database: System.get_env("DATABASE_NAME", "kjogvi_dev"),
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10,
  log: false

# nil username fails, no username uses the current user
db_user = System.get_env("DATABASE_USER")

if db_user do
  config :kjogvi, Kjogvi.Repo, username: db_user
end

config :kjogvi, Kjogvi.OrnithoRepo,
  hostname: System.get_env("DATABASE_ORNITHO_HOST", "localhost"),
  port: System.get_env("DATABASE_ORNITHO_PORT"),
  password: System.get_env("DATABASE_ORNITHO_PASSWORD"),
  database: System.get_env("DATABASE_ORNITHO_NAME", "ornithologue_dev"),
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10,
  log: false

# nil username fails, no username uses the current user
ornitho_db_user = System.get_env("DATABASE_ORNITHO_USER")

if ornitho_db_user do
  config :kjogvi, Kjogvi.OrnithoRepo, username: ornitho_db_user
end

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :kjogvi_web, KjogviWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: System.get_env("SHOW_ERROR_PAGES") not in ~w{true 1},
  secret_key_base:
    System.get_env("SECRET_KEY_BASE") ||
      "Sr/NUHLLmYIqi8RvF+w31wYVljGktNRD+PFxz2MUnXeCwD0HlDD/dpMDachBo5JU",
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:kjogvi_web, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:kjogvi_web, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :kjogvi_web, KjogviWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/kjogvi_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :kjogvi_web, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# ORNITHOLOGUE

# config :ex_aws,
#   access_key_id: [{:system, "AWS_ACCESS_KEY_ID"}, {:awscli, "default", 30}, :instance_role],
#   secret_access_key: [
#     {:system, "AWS_SECRET_ACCESS_KEY"},
#     {:awscli, "default", 30},
#     :instance_role
#   ],
#   region: {:system, "AWS_REGION"}

# config :ornithologue, Ornitho.StreamImporter,
#   adapter: Ornitho.StreamImporter.S3Adapter,
#   bucket: System.get_env("ORNITHO_IMPORTER_S3_BUCKET"),
#   region: System.get_env("ORNITHO_IMPORTER_S3_REGION")

# KJOGVI

# config :kjogvi, :legacy,
#   adapter: Kjogvi.Legacy.Adapters.Download,
#   url: System.get_env("LEGACY_URL"),
#   api_key: System.get_env("LEGACY_API_KEY")
