defmodule Kjogvi.Legacy.Import.Cards do
  @moduledoc false

  def import(columns_str, rows) do
    columns = columns_str |> Enum.map(&String.to_atom/1)

    cards =
      for row <- rows do
        # time = DateTime.utc_now()

        Enum.zip(columns, row)
        |> Enum.into(%{})
        |> transform_keys
      end

    _ = Kjogvi.Repo.insert_all(Kjogvi.Birding.Card, cards)

    Kjogvi.Repo.query!("SELECT setval('cards_id_seq', (SELECT MAX(id) FROM cards));")
  end

  def truncate do
    _ = Kjogvi.Repo.query!("TRUNCATE cards CASCADE;")
    _ = Kjogvi.Repo.query!("ALTER SEQUENCE cards_id_seq RESTART;")
  end

  defp transform_keys(
         %{
           locus_id: loc_id,
           autogenerated: autogenerated,
           created_at: created_at,
           updated_at: updated_at,
           start_time: start_time,
           observ_date: observ_date
         } = card
       ) do
    inserted_at = convert_timestamp(created_at)
    update_time = convert_timestamp(updated_at)
    observ_date = convert_date(observ_date)

    card
    |> Map.drop([:locus_id, :autogenerated, :created_at, :post_id])
    |> Map.put(:location_id, loc_id)
    |> Map.put(:legacy_autogenerated, autogenerated)
    |> Map.put(:inserted_at, inserted_at)
    |> Map.put(:updated_at, update_time)
    |> Map.put(:observ_date, observ_date)
    |> Map.put(:start_time, convert_start_time(start_time))
  end

  def convert_start_time(""), do: nil
  def convert_start_time(nil), do: nil

  def convert_start_time(str) do
    [hr, min] = String.split(str, ":")
    {:ok, time} = Time.new(String.to_integer(hr), String.to_integer(min), 0)
    time
  end

  defp convert_timestamp(%NaiveDateTime{} = time) do
    {:ok, converted} = DateTime.from_naive(time, "Etc/UTC")
    converted
  end

  defp convert_timestamp(time) when is_binary(time) do
    {:ok, dt, _} = DateTime.from_iso8601(time)
    {usec, _} = dt.microsecond
    %{dt | microsecond: {usec, 6}}
  end

  defp convert_date(%Date{} = date) do
    date
  end

  defp convert_date(date) when is_binary(date) do
    {:ok, converted} = Date.from_iso8601(date)
    converted
  end
end
