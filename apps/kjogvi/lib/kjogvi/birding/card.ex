defmodule Kjogvi.Birding.Card do
  @moduledoc """
  Card schema (equivalent to eBird checklist).
  """

  use Kjogvi.Schema
  import Ecto.Changeset

  schema "cards" do
    field :observ_date, :date
    belongs_to(:location, Kjogvi.Geo.Location)

    field :effort_type, :string
    field :start_time, :time
    field :duration_minutes, :integer
    field :distance_kms, :float
    field :area_acres, :float

    field :biotope, :string
    field :weather, :string
    field :observers, :string

    field :notes, :string
    field :kml_url, :string
    field :motorless, :boolean, default: false

    field :legacy_autogenerated, :boolean, default: false
    field :resolved, :boolean, default: false

    field :ebird_id, :string

    has_many(:observations, Kjogvi.Birding.Observation)
    belongs_to(:user, Kjogvi.Users.User)

    # Generated
    field :cached_year, :integer
    field :cached_month, :integer

    timestamps()

    field :observation_count, :integer, virtual: true
  end

  @doc false
  def changeset(card, attrs) do
    card
    |> cast(attrs, [])
    |> validate_required([
      :observ_date,
      :location_id,
      :effort_type,
      :motorless,
      :legacy_autogenerated,
      :resolved
    ])
  end
end
